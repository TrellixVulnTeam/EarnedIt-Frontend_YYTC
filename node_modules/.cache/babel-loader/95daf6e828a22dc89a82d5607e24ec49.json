{"ast":null,"code":"var _jsxFileName = \"/Users/onesmusnyakotyo/earnedit/frontend/src/screens/CheckoutScreen/StripeCheckout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { useSelector } from 'react-redux';\nimport { FetchFromAPI } from './StripeHelper';\nimport { Button, Form } from 'react-bootstrap';\nimport Loader from '../../components/Loader';\nimport Message from '../../components/Message';\nimport FormContainer from '../../components/FormContainer';\nimport Stripe from 'stripe'; //import { LinkContainer } from 'react-router-bootstrap'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StripeCheckout = () => {\n  _s();\n\n  const elements = useElements();\n  const stripe = useStripe();\n  const [email, setEmail] = useState('');\n  const order = useSelector(state => state.order); //   Calculate prices\n\n  const addDecimals = num => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  order.shippingAmount = addDecimals(order.sendAmount.fromAmount * 0.10, 0);\n  order.totalAmount = (Number(order.sendAmount.fromAmount) + Number(order.shippingAmount)).toFixed(2);\n  const transactionTotals = []; //console.log('Totals', transactionTotals)\n\n  transactionTotals.push(order.totalAmount);\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    loading,\n    error,\n    userInfo\n  } = userLogin;\n\n  const checkoutHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const line_items = transactionTotals.map(item => {\n      return {\n        quantity: 1,\n        price_data: {\n          currency: 'usd',\n          unit_amount: item * 100,\n          product_data: {\n            name: 'Money transfer',\n            description: 'Money will be transfered immediately and ready for collection' //images: [item.imageUrl]\n\n          }\n        }\n      };\n    });\n    const response = await FetchFromAPI('create-checkout-session', {\n      body: {\n        line_items,\n        customer_email: email\n      }\n    });\n    const {\n      sessionId\n    } = response;\n    const stripeAPI = new Stripe('sk_test_DIeLvFU6F4MVTluMPrwu9lDL00OEVoDGsO');\n    const {\n      error: stripeError,\n      paymentIntent\n    } = await stripeAPI.confirmCardPayment(response, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (stripeError) {\n      console.log(stripeError.message);\n      return;\n    }\n\n    console.log(`PaymentIntent (${paymentIntent.id}) : ${paymentIntent.status}`);\n    const {\n      error\n    } = await stripe.redirectToCheckout({\n      sessionId\n    });\n\n    if (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 26\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-center py-3 m-3\",\n        children: \"Please Checkout Below\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: checkoutHandler,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Email\",\n            value: email,\n            required: true,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            children: \"Checkout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(StripeCheckout, \"0lsRwrfhCOSrCjTfp0fUITMh8Us=\", false, function () {\n  return [useElements, useStripe, useSelector, useSelector];\n});\n\n_c = StripeCheckout;\nexport default StripeCheckout;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"sources":["/Users/onesmusnyakotyo/earnedit/frontend/src/screens/CheckoutScreen/StripeCheckout.js"],"names":["React","useState","CardElement","useElements","useStripe","useSelector","FetchFromAPI","Button","Form","Loader","Message","FormContainer","Stripe","StripeCheckout","elements","stripe","email","setEmail","order","state","addDecimals","num","Math","round","toFixed","shippingAmount","sendAmount","fromAmount","totalAmount","Number","transactionTotals","push","userLogin","loading","error","userInfo","checkoutHandler","e","preventDefault","line_items","map","item","quantity","price_data","currency","unit_amount","product_data","name","description","response","body","customer_email","sessionId","stripeAPI","stripeError","paymentIntent","confirmCardPayment","payment_method","card","getElement","console","log","message","id","status","redirectToCheckout","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {  CardElement, useElements, useStripe } from '@stripe/react-stripe-js'\nimport { useSelector } from 'react-redux'\nimport { FetchFromAPI }  from './StripeHelper'\nimport {Button, Form } from 'react-bootstrap'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport FormContainer from '../../components/FormContainer'\nimport Stripe from 'stripe'\n//import { LinkContainer } from 'react-router-bootstrap'\n\n\nconst StripeCheckout = () => {\n\n      const elements = useElements()\n\n      const stripe = useStripe()\n\n    const [email, setEmail] = useState('')\n\n    const order  = useSelector((state) => state.order)\n\n\n   //   Calculate prices\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2)\n  }\n\n\n    order.shippingAmount = addDecimals(order.sendAmount.fromAmount * 0.10, 0)\n\n  order.totalAmount = (\n    Number(order.sendAmount.fromAmount) +\n    Number(order.shippingAmount )\n    ).toFixed(2)\n\n    const transactionTotals = []\n\n    //console.log('Totals', transactionTotals)\n\n    transactionTotals.push(order.totalAmount)\n\n\n    const userLogin = useSelector(state => state.userLogin)\n\n\n    const { loading, error, userInfo} = userLogin\n\n\n    const checkoutHandler = async (e) => {\n        e.preventDefault()\n        if(!stripe || !elements){\n            return\n        }\n        const line_items = transactionTotals.map(item => {\n         \n            return {\n                quantity: 1,\n                price_data: {\n                    currency:'usd',\n                    unit_amount: item * 100,\n                    product_data: {\n                        name: 'Money transfer',\n                        description: 'Money will be transfered immediately and ready for collection',\n                        //images: [item.imageUrl]\n                    }\n                }\n            }\n        })\n\n        \n\n            const response = await FetchFromAPI('create-checkout-session', {\n             body: { line_items, customer_email: email },\n            });\n\n            \n            const { sessionId } = response;\n\n            const stripeAPI = new Stripe('sk_test_DIeLvFU6F4MVTluMPrwu9lDL00OEVoDGsO');\n\n                const { error: stripeError, paymentIntent } = await stripeAPI.confirmCardPayment(\n                    response, {\n                        payment_method: {\n                            card: elements.getElement(CardElement)\n                        }\n                    }\n                )\n\n                if(stripeError){\n                    console.log(stripeError.message)\n                    return\n                }\n\n                console.log(`PaymentIntent (${paymentIntent.id}) : ${paymentIntent.status}`)\n\n\n            const { error } = await stripe.redirectToCheckout({\n             sessionId\n            });\n\n         \n\n           \n            \n            if(error) {\n            console.log(error);\n            }\n\n         \n        }\n\n    return (\n        <>\n            <FormContainer>\n\n\n               {error && <Message variant='danger'>{error}</Message>}\n               {loading && <Loader />}\n                   \n                <h4 className='text-center py-3 m-3'>Please Checkout Below</h4>\n                 \n                     \n\n                <Form  onSubmit={checkoutHandler}> \n                <Form.Group className='text-center'>\n  \n                    <Form.Control \n                        type=\"email\" \n                        placeholder=\"Email\"  \n                        value={email}\n                        required\n                        onChange={(e) => setEmail(e.target.value)}\n                        />\n                    <br />\n    \n                    <Button type='submit' variant='primary'>\n                            Checkout\n                    </Button>\n  \n                </Form.Group>\n                </Form>  \n            </FormContainer>\n            </>\n    )\n}\n\nexport default StripeCheckout\n\n\n"]},"metadata":{},"sourceType":"module"}