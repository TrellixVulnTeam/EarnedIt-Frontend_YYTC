{"ast":null,"code":"var _jsxFileName = \"/Users/onesmusnyakotyo/earnedit/frontend/src/components/StripePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSelector } from 'react-redux';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\"; // import \"./styles.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\nconst StripePage = () => {\n  _s();\n\n  //const dispatch = useDispatch()\n  const order = useSelector(state => state.order);\n  console.log(order); //   Calculate prices\n\n  const addDecimals = num => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  order.shippingAmount = addDecimals(order.sendAmount.fromAmount * 0.10, 0);\n  order.totalAmount = (Number(order.sendAmount.fromAmount) + Number(order.shippingAmount)).toFixed(2);\n  const [product] = useState({\n    name: \"Money Transfer\",\n    price: order.sendAmount.toAmount,\n    description: \"Money transfer\"\n  });\n\n  async function handleToken(token, addresses) {\n    console.log('Front', token);\n    const response = await axios.post(console.log(token), '/api/orders/order', {\n      token,\n      product\n    });\n    const {\n      status\n    } = response.data;\n    console.log(\"Response:\", response.data);\n\n    if (status === \"success\") {\n      toast(\"Success! Check email for details\", {\n        type: \"success\"\n      });\n    } else {\n      toast(\"Something went wrong\", {\n        type: \"error\"\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"You are sending $\", product.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(StripeCheckout, {\n          stripeKey: \"pk_test_FQ6MNjx0p8vsvmT2vdVePuJ100HQ1ZkxvE\",\n          token: handleToken,\n          amount: product.price * 100,\n          name: \"transaction\",\n          billingAddress: true,\n          shippingAddress: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(StripePage, \"3060gh87RUxLubnffGmcWloVC4s=\", false, function () {\n  return [useSelector];\n});\n\n_c = StripePage;\nexport default StripePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripePage\");","map":{"version":3,"sources":["/Users/onesmusnyakotyo/earnedit/frontend/src/components/StripePage.js"],"names":["React","useState","useSelector","Container","Row","Col","StripeCheckout","axios","toast","configure","StripePage","order","state","console","log","addDecimals","num","Math","round","toFixed","shippingAmount","sendAmount","fromAmount","totalAmount","Number","product","name","price","toAmount","description","handleToken","token","addresses","response","post","status","data","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAAQC,WAAR,QAA2B,aAA3B;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,uCAAP,C,CACA;;;;AAEAA,KAAK,CAACC,SAAN;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB;AAEF,QAAMC,KAAK,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACD,KAAlB,CAAzB;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EANuB,CAQtB;;AACD,QAAMI,WAAW,GAAIC,GAAD,IAAS;AAC3B,WAAO,CAACC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,GAAzB,EAA8BG,OAA9B,CAAsC,CAAtC,CAAP;AACD,GAFD;;AAKAR,EAAAA,KAAK,CAACS,cAAN,GAAuBL,WAAW,CAACJ,KAAK,CAACU,UAAN,CAAiBC,UAAjB,GAA8B,IAA/B,EAAqC,CAArC,CAAlC;AAEAX,EAAAA,KAAK,CAACY,WAAN,GAAoB,CAClBC,MAAM,CAACb,KAAK,CAACU,UAAN,CAAiBC,UAAlB,CAAN,GACAE,MAAM,CAACb,KAAK,CAACS,cAAP,CAFY,EAGhBD,OAHgB,CAGR,CAHQ,CAApB;AAUA,QAAM,CAACM,OAAD,IAAYxB,QAAQ,CAAC;AACzByB,IAAAA,IAAI,EAAE,gBADmB;AAEzBC,IAAAA,KAAK,EAAEhB,KAAK,CAACU,UAAN,CAAiBO,QAFC;AAGzBC,IAAAA,WAAW,EAAE;AAHY,GAAD,CAA1B;;AAMA,iBAAeC,WAAf,CAA2BC,KAA3B,EAAkCC,SAAlC,EAA6C;AAC3CnB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBiB,KAArB;AACA,UAAME,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAN,CACrBrB,OAAO,CAACC,GAAR,CAAYiB,KAAZ,CADqB,EAErB,mBAFqB,EAGrB;AAAEA,MAAAA,KAAF;AAASN,MAAAA;AAAT,KAHqB,CAAvB;AAOA,UAAM;AAAEU,MAAAA;AAAF,QAAaF,QAAQ,CAACG,IAA5B;AACAvB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBmB,QAAQ,CAACG,IAAlC;;AAEA,QAAID,MAAM,KAAK,SAAf,EAA0B;AACxB3B,MAAAA,KAAK,CAAC,kCAAD,EAAqC;AAAE6B,QAAAA,IAAI,EAAE;AAAR,OAArC,CAAL;AACD,KAFD,MAEO;AACL7B,MAAAA,KAAK,CAAC,sBAAD,EAAyB;AAAE6B,QAAAA,IAAI,EAAE;AAAR,OAAzB,CAAL;AACD;AACF;;AAED,sBACE;AAAA,2BACE,QAAC,SAAD;AAAA,6BACG,QAAC,GAAD;AAAA,gCACE,QAAC,GAAD;AAAA,kCACG;AAAA,sBAAKZ,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,kBADH,eAEG;AAAA,4CAAsBD,OAAO,CAACE,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKC,QAAC,cAAD;AACE,UAAA,SAAS,EAAC,4CADZ;AAEE,UAAA,KAAK,EAAEG,WAFT;AAGE,UAAA,MAAM,EAAEL,OAAO,CAACE,KAAR,GAAgB,GAH1B;AAIE,UAAA,IAAI,EAAC,aAJP;AAKE,UAAA,cAAc,MALhB;AAME,UAAA,eAAe;AANjB;AAAA;AAAA;AAAA;AAAA,gBALD;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyBD,CA5ED;;GAAMjB,U;UAIUR,W;;;KAJVQ,U;AA8EN,eAAeA,UAAf","sourcesContent":["import React,{useState} from \"react\";\nimport {useSelector } from 'react-redux'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\n// import \"./styles.css\";\n\ntoast.configure();\n\nconst StripePage = () => {\n\n    //const dispatch = useDispatch()\n\n  const order = useSelector((state) => state.order)\n\n  console.log(order)\n\n   //   Calculate prices\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2)\n  }\n\n\n  order.shippingAmount = addDecimals(order.sendAmount.fromAmount * 0.10, 0)\n\n  order.totalAmount = (\n    Number(order.sendAmount.fromAmount) +\n    Number(order.shippingAmount )\n    ).toFixed(2)\n\n\n\n \n\n\n  const [product] = useState({\n    name: \"Money Transfer\",\n    price: order.sendAmount.toAmount ,\n    description: \"Money transfer\"\n  });\n\n  async function handleToken(token, addresses) {\n    console.log('Front', token)\n    const response = await axios.post(\n      console.log(token),\n      '/api/orders/order',\n      { token, product }\n      \n    );\n    \n    const { status } = response.data;\n    console.log(\"Response:\", response.data);\n\n    if (status === \"success\") {\n      toast(\"Success! Check email for details\", { type: \"success\" });\n    } else {\n      toast(\"Something went wrong\", { type: \"error\" });\n    }\n  }\n\n  return (\n    <>\n      <Container>\n         <Row>\n           <Col>\n              <h1>{product.name}</h1>\n              <h3>You are sending ${product.price}</h3>\n           </Col>\n          <StripeCheckout\n            stripeKey=\"pk_test_FQ6MNjx0p8vsvmT2vdVePuJ100HQ1ZkxvE\"\n            token={handleToken}\n            amount={product.price * 100}\n            name=\"transaction\"\n            billingAddress\n            shippingAddress\n          />\n\n         </Row>\n        \n\n      </Container>\n    </>\n      \n   \n  );\n}\n\nexport default StripePage\n"]},"metadata":{},"sourceType":"module"}