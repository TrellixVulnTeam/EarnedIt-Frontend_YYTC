{"ast":null,"code":"import { USER_LOGOUT, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstants\";\nimport axios from 'axios'; //import { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\"\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  }); // dispatch({type: USER_DETAILS_RESET})\n  // dispatch({type: ORDER_LIST_MY_RESET})\n  // dispatch({type: USER_LIST_RESET})\n};","map":{"version":3,"sources":["/Users/onesmusnyakotyo/earnedit/frontend/src/actions/userActions.js"],"names":["USER_LOGOUT","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","register","name","logout","removeItem"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,kBAAvC,EAA2DC,kBAA3D,EAA+EC,kBAA/E,EAAmGC,qBAAnG,EAA0HC,qBAA1H,QAAsJ,4BAAtJ;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsB,MAAOC,QAAP,IAAoB;AAC3D,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAIA,UAAMW,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+B;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA/B,EAAoDG,MAApD,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,kBADD;AAELc,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AAEH,GApBD,CAoBE,OAAMO,KAAN,EAAY;AACVX,IAAAA,QAAQ,CAAC;AACOC,MAAAA,IAAI,EAAEX,eADb;AAEOgB,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACTF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADX,GAEPF,KAAK,CAACE;AAJf,KAAD,CAAR;AAMH;AAGJ,CA/BM;AAkCP,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOjB,KAAP,EAAcC,QAAd,KAA4B,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP;AADD,KAAD,CAAR;AAIA,UAAMQ,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CAAW,qBAAX,EAAkC;AAAEU,MAAAA,IAAF;AAAQjB,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAlC,EAA6DG,MAA7D,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,qBADD;AAELW,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKCJ,IAAAA,QAAQ,CAAC;AACNC,MAAAA,IAAI,EAAET,kBADA;AAENc,MAAAA,OAAO,EAAEF;AAFH,KAAD,CAAR;AAKDG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AAEH,GAzBD,CAyBE,OAAMO,KAAN,EAAY;AACVX,IAAAA,QAAQ,CAAC;AACOC,MAAAA,IAAI,EAAER,kBADb;AAEOa,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACTF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADX,GAEPF,KAAK,CAACE;AAJf,KAAD,CAAR;AAMH;AAEJ,CAnCM;AAqCP,OAAO,MAAMG,MAAM,GAAG,MAAOhB,QAAD,IAAc;AAClCO,EAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB;AACAjB,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEZ;AAAP,GAAD,CAAR,CAFkC,CAGlC;AACA;AACA;AACH,CANE","sourcesContent":["import { USER_LOGOUT, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS} from \"../constants/userConstants\"\nimport axios from 'axios'\n//import { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\"\n\nexport const login = (email, password ) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/users/login', { email, password }, config)\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data) )\n\n    } catch(error){\n        dispatch({\n                        type: USER_LOGIN_FAIL,\n                        payload: error.response && error.response.data.message ? \n                        error.response.data.message\n                        : error.message\n                    })\n    }\n\n    \n}\n\n\nexport const register = (name, email, password ) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/users/register', { name, email, password }, config)\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n         dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data) )\n\n    } catch(error){\n        dispatch({\n                        type: USER_REGISTER_FAIL,\n                        payload: error.response && error.response.data.message ? \n                        error.response.data.message\n                        : error.message\n                    })\n    }\n\n}\n\nexport const logout = () => (dispatch) => {\n        localStorage.removeItem('userInfo')\n        dispatch({type: USER_LOGOUT})\n        // dispatch({type: USER_DETAILS_RESET})\n        // dispatch({type: ORDER_LIST_MY_RESET})\n        // dispatch({type: USER_LIST_RESET})\n    }"]},"metadata":{},"sourceType":"module"}