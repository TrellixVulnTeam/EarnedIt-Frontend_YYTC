{"ast":null,"code":"import { SAVE_COLLECTION_METHOD, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_SAVE_SEND_COUNTRY, ORDER_AMOUNT, SAVE_RECIPIENT_ADDRESS, SAVE_PAYMENT_METHOD } from '../constants/orderConstants';\nimport axios from 'axios'; //import { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\nimport { logout } from './userActions';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    }); // dispatch({\n    //   type: CART_CLEAR_ITEMS,\n    //   payload: data,\n    // })\n\n    localStorage.removeItem('sendAmount');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const saveSendCountry = value => dispatch => {\n  console.log('Back', value);\n  dispatch({\n    type: ORDER_SAVE_SEND_COUNTRY,\n    payload: value\n  });\n  localStorage.setItem('sendCountry', JSON.stringify(value));\n};\nexport const saveSendAmount = value => dispatch => {\n  console.log('Back Amount', value);\n  dispatch({\n    type: ORDER_AMOUNT,\n    payload: value\n  });\n  localStorage.setItem('sendAmount', JSON.stringify(value));\n};\nexport const saveRecipientAddress = data => dispatch => {\n  dispatch({\n    type: SAVE_RECIPIENT_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('recipientAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n  localStorage.setItem('paymentMethod', JSON.stringify(data));\n};\nexport const saveCollectionMethod = value => dispatch => {\n  console.log('Back Collection', value);\n  dispatch({\n    type: SAVE_COLLECTION_METHOD,\n    payload: value\n  });\n  localStorage.setItem('collectionMethod', JSON.stringify(value));\n}; // export const saveSendCountry  = (value) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   try {\n//     dispatch({\n//       type: ORDER_SAVE_SEND_COUNTRY,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.post(\n//       '/api/orders/order',\n//       value,\n//       config\n//     )\n//     dispatch({\n//       type: ORDER_SAVE_SEND_COUNTRY,\n//       payload: data,\n//     })\n//     localStorage.setItem('sendCountry', JSON.stringify(data))\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     // dispatch({\n//     //   type: ORDER_PAY_FAIL,\n//     //   payload: message,\n//     // })\n//   }\n// }","map":{"version":3,"sources":["/Users/onesmusnyakotyo/earnedit/frontend/src/actions/orderActions.js"],"names":["SAVE_COLLECTION_METHOD","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_SAVE_SEND_COUNTRY","ORDER_AMOUNT","SAVE_RECIPIENT_ADDRESS","SAVE_PAYMENT_METHOD","axios","logout","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response","saveSendCountry","value","console","log","setItem","JSON","stringify","saveSendAmount","saveRecipientAddress","savePaymentMethod","saveCollectionMethod"],"mappings":"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","sourcesContent":["import { SAVE_COLLECTION_METHOD, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL,ORDER_SAVE_SEND_COUNTRY, ORDER_AMOUNT, SAVE_RECIPIENT_ADDRESS, SAVE_PAYMENT_METHOD } from '../constants/orderConstants'\nimport axios from 'axios'\n//import { CART_CLEAR_ITEMS } from '../constants/cartConstants'\nimport { logout } from './userActions'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/orders`, order, config)\n\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data,\n    })\n    // dispatch({\n    //   type: CART_CLEAR_ITEMS,\n    //   payload: data,\n    // })\n    localStorage.removeItem('sendAmount')\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message,\n    })\n  }\n}\n\n\nexport const saveSendCountry = (value) => (dispatch) => {\n    console.log('Back', value)\n   \n  dispatch({\n    type: ORDER_SAVE_SEND_COUNTRY,\n    payload: value\n  })\n\n  localStorage.setItem('sendCountry', JSON.stringify(value))\n}\n\n\n\n\nexport const saveSendAmount = (value) => (dispatch) =>  {\n    console.log('Back Amount', value)\n\n   \n  dispatch({\n    type: ORDER_AMOUNT,\n    payload: value\n  })\n\n  localStorage.setItem('sendAmount', JSON.stringify(value))\n}\n\nexport const saveRecipientAddress = (data) => (dispatch) => {\n  dispatch({\n    type: SAVE_RECIPIENT_ADDRESS,\n    payload: data,\n  })\n\n  localStorage.setItem('recipientAddress', JSON.stringify(data))\n}\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n  dispatch({\n    type: SAVE_PAYMENT_METHOD,\n    payload: data,\n  })\n\n  localStorage.setItem('paymentMethod', JSON.stringify(data))\n\n}\n\n \nexport const saveCollectionMethod = (value) => (dispatch) => {\n\n      console.log('Back Collection', value)\n\n\n  dispatch({\n    type: SAVE_COLLECTION_METHOD,\n    payload: value,\n  })\n\n  localStorage.setItem('collectionMethod', JSON.stringify(value))\n\n}\n\n\n// export const saveSendCountry  = (value) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   try {\n//     dispatch({\n//       type: ORDER_SAVE_SEND_COUNTRY,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.post(\n//       '/api/orders/order',\n//       value,\n//       config\n//     )\n\n//     dispatch({\n//       type: ORDER_SAVE_SEND_COUNTRY,\n//       payload: data,\n//     })\n\n//     localStorage.setItem('sendCountry', JSON.stringify(data))\n\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     // dispatch({\n//     //   type: ORDER_PAY_FAIL,\n//     //   payload: message,\n//     // })\n//   }\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}