{"ast":null,"code":"var _jsxFileName = \"/Users/onesmusnyakotyo/earnedit/frontend/src/components/CurrencyConverter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CurrencyDisplay from './CurrencyDisplay';\nimport { Card, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = 'http://api.exchangeratesapi.io/v1/latest?access_key=05a30093e4bf0babea0056584359f583'; //const BASE_URL = 'https://api.exchangeratesapi.io/latest?access_key=243a6baba190aebcd28de3852c8aa39e'\n//const BASE_URL = 'http://api.currencylayer.com/live?access_key=243a6baba190aebcd28de3852c8aa39e'\n\nconsole.log(BASE_URL);\n\nconst CurrencyConverter = () => {\n  _s();\n\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\n  const order = useSelector(state => state.order);\n  const {\n    sendCountry\n  } = order;\n  console.log('CurrencyC', sendCountry.value);\n  let toAmount, fromAmount;\n\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate || 0;\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL).then(res => res.json()).then(data => {\n      console.log(data);\n      const firstCurrency = Object.keys(data.rates)[0];\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n      setFromCurrency(data.base);\n      setToCurrency(firstCurrency);\n      setExchangeRate(data.rates[firstCurrency]);\n    });\n  }, []);\n  useEffect(() => {\n    if (fromCurrency === toCurrency && fromCurrency !== undefined && toCurrency !== undefined) {\n      setExchangeRate(1);\n      return;\n    }\n\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}&base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => setExchangeRate(data.rates[toCurrency]));\n    }\n\n    console.log('Rates', exchangeRate);\n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center py-5\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        as: \"h4\",\n        children: \"Currency Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Sending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CurrencyDisplay, {\n          currencyOptions: currencyOptions,\n          selectedCurrency: fromCurrency,\n          onChangeCurrency: e => setFromCurrency(e.target.value),\n          onChangeAmount: handleFromAmountChange,\n          amount: fromAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"equals py-3\",\n          children: \"=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Receiver gets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [`${fromCurrency}`, \" = \", exchangeRate, \" \", `${toCurrency}`, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CurrencyDisplay, {\n          currencyOptions: currencyOptions,\n          selectedCurrency: toCurrency,\n          onChangeCurrency: e => setToCurrency(e.target.value),\n          onChangeAmount: handleToAmountChange,\n          amount: toAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LinkContainer, {\n          className: \"py-2 mt-3\",\n          to: \"/send/sendcost\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"dark\",\n            children: \" Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n        className: \"text-muted\",\n        children: \"Latest Exchange Rate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyConverter, \"xIKeIX6oCqLUzlUe0LsHCkdh9IM=\", false, function () {\n  return [useSelector];\n});\n\n_c = CurrencyConverter;\nexport default CurrencyConverter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["/Users/onesmusnyakotyo/earnedit/frontend/src/components/CurrencyConverter.js"],"names":["React","useEffect","useState","CurrencyDisplay","Card","Button","LinkContainer","useDispatch","useSelector","BASE_URL","console","log","CurrencyConverter","currencyOptions","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","amountInFromCurrency","setAmountInFromCurrency","order","state","sendCountry","value","toAmount","fromAmount","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","undefined","handleFromAmountChange","e","target","handleToAmountChange"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport CurrencyDisplay from './CurrencyDisplay'\nimport { Card, Button  } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\n\n\nconst BASE_URL = 'http://api.exchangeratesapi.io/v1/latest?access_key=05a30093e4bf0babea0056584359f583'\n//const BASE_URL = 'https://api.exchangeratesapi.io/latest?access_key=243a6baba190aebcd28de3852c8aa39e'\n//const BASE_URL = 'http://api.currencylayer.com/live?access_key=243a6baba190aebcd28de3852c8aa39e'\n\nconsole.log(BASE_URL)\n\nconst CurrencyConverter = () => {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  const order = useSelector((state) => state.order)\n  const { sendCountry } = order\n\n  console.log('CurrencyC', sendCountry.value)\n\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate \n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate || 0\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (\n      fromCurrency === toCurrency &&\n      fromCurrency !== undefined &&\n      toCurrency !== undefined\n    ) {\n      setExchangeRate(1)\n      return\n    }\n\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}&base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n\n    console.log('Rates',exchangeRate)\n    \n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return (\n    <div className=\"text-center py-5\">\n    <Card >\n        <Card.Header as=\"h4\" >Currency Converter</Card.Header>\n            <Card.Body>\n              <h5>Sending</h5>\n                <CurrencyDisplay\n                        currencyOptions={currencyOptions}\n                        selectedCurrency={fromCurrency}\n                        onChangeCurrency={e => setFromCurrency(e.target.value)}\n                        onChangeAmount={handleFromAmountChange}\n                        amount={fromAmount}\n                    />\n                    <div className=\"equals py-3\">=</div>\n\n                    <h5>Receiver gets</h5>\n                    <p>{`${fromCurrency}`} = {exchangeRate} {`${toCurrency}`} </p>\n\n                    <CurrencyDisplay \n                        currencyOptions={currencyOptions}\n                        selectedCurrency={toCurrency}\n                        onChangeCurrency={e => setToCurrency(e.target.value)}\n                        onChangeAmount={handleToAmountChange}\n                        amount={toAmount}\n                    />\n                    <LinkContainer className=\"py-2 mt-3\" to='/send/sendcost'>\n                        <Button variant=\"dark\"> Done</Button>\n                    </LinkContainer>\n                      \n            </Card.Body>\n            <Card.Footer className=\"text-muted\">Latest Exchange Rate</Card.Footer>\n    </Card>\n      \n      \n    </div>\n  );\n}\n\nexport default CurrencyConverter;"]},"metadata":{},"sourceType":"module"}