{"ast":null,"code":"var _jsxFileName = \"/Users/onesmusnyakotyo/earnedit/frontend/src/screens/CheckoutScreen/Success.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, CardGroup, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { createOrder } from '../../actions/orderActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Success = ({\n  location\n}) => {\n  _s();\n\n  //const { clearCart, cartItems } = useContext(CartContext);\n  //   useEffect(() => {\n  //     if (cartItems.length !==0) { clearCart() }\n  //   }, [clearCart, cartItems]);\n  // const [collectionNumber, setCollectionNumber] = useState('0')\n  // const min = 10000\n  // const max = 1000000\n  // const rand = min + Math.random() * (max - min)\n  // useEffect(() => {\n  //     setCollectionNumber(collectionNumber + rand)\n  // }, [collectionNumber, rand])\n  //console.log(collectionNumber)\n  const dispatch = useDispatch();\n  const order = useSelector(state => state.order); //   Calculate prices\n\n  const addDecimals = num => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  order.shippingAmount = addDecimals(order.sendAmount.fromAmount * 0.10, 0); //Total amount to pay ie money to send + charge/commission(shipping amount) for the transaction\n\n  order.totalAmount = (Number(order.sendAmount.fromAmount) + Number(order.shippingAmount)).toFixed(2);\n  order.sendAmount.fromAmount = Number(order.sendAmount.fromAmount);\n  order.sendAmount.toAmount = Number(order.sendAmount.toAmount).toFixed(2);\n  useEffect(() => {\n    //if(location.pathname === successCheckout ){\n    dispatch(createOrder({\n      orderAmount: order.sendAmount,\n      shippingAmount: order.shippingAmount,\n      recipientAddress: order.recipientAddress,\n      totalAmount: order.totalAmount,\n      exchangeRate: order.exchangeRate,\n      sendCountry: order.sendCountry,\n      collectionMethod: order.collectionMethod.collectionMethod\n    })); //}\n  }, [location, dispatch, order.sendAmount, order.shippingAmount, order.recipientAddress, order.totalAmount, order.exchangeRate, order.sendCountry, order.collectionMethod.collectionMethod]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CardGroup, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          as: \"h4\",\n          children: \"Transaction Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-hand-holding-usd fa-lg py-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: \"Thank you for your order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: \"We are currently processing your order and will send you a confirmation email shortly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n          children: /*#__PURE__*/_jsxDEV(LinkContainer, {\n            to: \"/send\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"dark\",\n              children: \"Send another money transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(Success, \"3ZFLXzxfQFSaypP6Zyz3VIWw+Pw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Success;\nexport default _c2 = withRouter(Success);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Success\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/onesmusnyakotyo/earnedit/frontend/src/screens/CheckoutScreen/Success.js"],"names":["React","useEffect","useState","withRouter","useDispatch","useSelector","Card","CardGroup","Button","LinkContainer","createOrder","Success","location","dispatch","order","state","addDecimals","num","Math","round","toFixed","shippingAmount","sendAmount","fromAmount","totalAmount","Number","toAmount","orderAmount","recipientAddress","exchangeRate","sendCountry","collectionMethod"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Card, CardGroup, Button  } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { createOrder } from '../../actions/orderActions'\n\nconst Success = ({location}) => {\n\n\n  //const { clearCart, cartItems } = useContext(CartContext);\n//   useEffect(() => {\n//     if (cartItems.length !==0) { clearCart() }\n//   }, [clearCart, cartItems]);\n\n\n// const [collectionNumber, setCollectionNumber] = useState('0')\n\n// const min = 10000\n\n// const max = 1000000\n\n// const rand = min + Math.random() * (max - min)\n\n// useEffect(() => {\n//     setCollectionNumber(collectionNumber + rand)\n// }, [collectionNumber, rand])\n\n\n\n//console.log(collectionNumber)\n\n\n const dispatch = useDispatch()\n\n  const order = useSelector((state) => state.order)\n\n   //   Calculate prices\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2)\n  }\n\n  order.shippingAmount = addDecimals(order.sendAmount.fromAmount * 0.10, 0)\n\n  //Total amount to pay ie money to send + charge/commission(shipping amount) for the transaction\n  order.totalAmount = (\n    Number(order.sendAmount.fromAmount) +\n    Number(order.shippingAmount )\n    ).toFixed(2)\n\n  order.sendAmount.fromAmount = Number(order.sendAmount.fromAmount)\n\n  order.sendAmount.toAmount = Number(order.sendAmount.toAmount).toFixed(2)\n    \n\n\nuseEffect (() => {\n\n      //if(location.pathname === successCheckout ){\n              dispatch(createOrder({\n                orderAmount: order.sendAmount,\n                shippingAmount: order.shippingAmount, \n                recipientAddress: order.recipientAddress,\n                totalAmount: order.totalAmount, \n                exchangeRate: order.exchangeRate,\n                sendCountry: order.sendCountry,\n                collectionMethod: order.collectionMethod.collectionMethod\n            }))\n  \n    \n  //}\n\n  },[\n    location, \n    dispatch,\n    order.sendAmount, \n    order.shippingAmount, \n    order.recipientAddress, \n    order.totalAmount,\n    order.exchangeRate,\n    order.sendCountry,\n    order.collectionMethod.collectionMethod\n  ])\n\n\n\n  return (\n    \n    <>\n    <CardGroup>\n                \n                <Card className=\"text-center\">\n                    <Card.Header as=\"h4\">Transaction Successful</Card.Header>\n                \n                    <i className=\"fas fa-hand-holding-usd fa-lg py-3\" ></i>\n                    <Card.Body>\n                    <Card.Title>Thank you for your order</Card.Title>\n                    <Card.Text>\n                        We are currently processing your order and \n                        will send you a confirmation email shortly\n                    </Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                    <LinkContainer to='/send'>\n                        <Button variant=\"dark\">Send another money transfer</Button>\n                    </LinkContainer>\n                    \n                    </Card.Footer>\n                </Card>\n            </CardGroup>\n        </>\n  );\n}\n\nexport default withRouter(Success);"]},"metadata":{},"sourceType":"module"}